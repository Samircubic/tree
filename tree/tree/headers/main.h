#ifndef MAIN_H
#define MAIN_H

#define ARG_TREE int //TODO typedef

const int       POISON          = -666;
const char*     NAME_FILE_LOG   = "log/log.dot";

typedef enum check
{
    ERROR, //TODO more errors
    OK                              // режим првильно выполненной функции
} check_t;

typedef struct node                 // структура корень дерева
{
    ARG_TREE data;                  // хранение данных дерева
    struct node* parent;            // родитель (элемен выше стоящий)
    struct node* left;              // указатель на продолжение дерево слева (указатель на более глубокий корень)
    struct node* right;             // указатель на продолжение дерево справа (указатель на более глубокий корень)
} node_t;

typedef struct tree                 // структура дерево
{
    node_t* node;                   // указатель на начальный корень дерева
    int size;                       // количество элементов дерева
} tree_t;

/*
удаление элемента по заданному значению, удаление происходит только в том случае если это листик
*/
check_t pop_elem (tree_t* tree, ARG_TREE value);

/*
проход по дереву с целью найти листочек с заданым значением
обратить внимание что проход иммено с поиском листочка, поиск просто значения не рассматривается
*/
node_t* walk_tree (node_t* node, ARG_TREE value);

/*
выделение памяти под продолжение дерева
заполнение ячейки данных переданным значением
*/
node_t*     new_elem            (ARG_TREE value);

/*
создание и выделение памяти для структуры дерево
возвращаемый элемент является указателем на структура дерева
*/
tree_t*     ctor_tree           ();

/*
удаление дерева и освобождение памяти дерева
внутри вызывается функция освобождения памяти всех элементов
*/
check_t     dtor_tree           (tree_t* tree);

/*
верификатор дерева
*/
check_t     check_tree          (tree_t* tree);

/*
удаление и освобождение памяти элементов
*/
check_t     dtor_elem           (node_t* node); //TODO dtor node

/*
добавление элемента в дерево с сопутствующими:
выдление памяти под элемент
добавление происходит сразу с сортировкой (сдева стоит всего элемент меньший родителя, справа элемент всегда больший родителя)
*/
check_t     push_elem           (tree_t* tree, ARG_TREE value);

/*
вывод дерева на экран польской записью
*/
void        print_tree          (node_t* node);

/*
вывод лог файла в отдельную папку
создается отедльный файл под код который в дальнейшем выполнятеся в грапфизе и создается файл с картинкой пнг
*/
check_t     dump_tree           (tree_t* tree);

/*
функция открытия файла с заданным именем и передаваемым режимом открытия
*/
FILE*       open_file           (const char* name_file, const char* reg);

/*
вывод самого дерева в открытый файл
*/
void        print_log_tree      (node_t* node, FILE* file);

/*
вывод настроек грапфиза в открытый файл
*/
void        print_log_settings  (FILE* file);

#endif // MAIN_H
